{"ast":null,"code":"import _defineProperty from \"/Users/mamed/Desktop/react/redux_fetching/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport actions from './actions';\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'LOADING':\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n  }\n}","map":{"version":3,"sources":["/Users/mamed/Desktop/react/redux_fetching/src/redux/reducer.js"],"names":["actions","initialState","items","loading","error","reducer","state","action","type"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,eAAe,SAASC,OAAT,CAAkBC,KAAK,GAAGL,YAA1B,EAAwCM,MAAxC,EAAgD;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,SAAL;AACI,+BACOF,KADP;AAEIH,QAAAA,OAAO,EAAE,IAFb;AAGIC,QAAAA,KAAK,EAAE;AAHX;AAFR;AASH","sourcesContent":["import actions from './actions'\n\nconst initialState = {\n    items: [],\n    loading: false,\n    error: null\n};\n\nexport default function reducer (state = initialState, action) {\n    switch (action.type) {\n        case 'LOADING':\n            return {\n                ...state,\n                loading: true,\n                error: null\n            }\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}